// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role Table
enum UserRole {
  ADMIN
  CUSTOMER
}

enum UserGender {
  MALE
  FEMALE
}

enum WatchGender {
  MEN
  WOMEN
  UNISEX
}

// Add this enum before the User model
enum PaymentMethod {
  COD
  MOMO
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  avatar        String?       
  phone         String?
  gender        UserGender?
  paymentMethod PaymentMethod @default(COD)  // Add this field
  role          UserRole      @default(CUSTOMER)
  cart         Cart?
  orders       Order[]
  addresses    Address[]
  stockEntries StockEntry[]
  favorites    Favorite[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Address Table (Shipping Address) 
model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String?   // Đường phố
  district  String?
  ward      String?   // Phường/Xã
  city      String?   // Thành phố
  country   String?   // Quốc gia
  orders    Order[]  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Brand Table
model Brand {
  id          String   @id @default(uuid())
  code        String   @unique @default(dbgenerated("concat('BR', upper(substring(replace(cast(gen_random_uuid() as varchar), '-', ''), 1, 8)))"))
  name        String   @unique @db.VarChar(100)
  country     String?  @db.VarChar(100)
  logo        String?  
  watches     Watch[]  // Quan hệ với Watch
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
}

// Material Table (Case Materials)
model Material {
  id        String   @id @default(uuid())
  code      String   @unique @default(dbgenerated("concat('MT', upper(substring(replace(cast(gen_random_uuid() as varchar), '-', ''), 1, 8)))"))
  name      String   @unique
  watches   Watch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// Band Material Table
model BandMaterial {
  id        String   @id @default(uuid())
  code      String   @unique @default(dbgenerated("concat('BM', upper(substring(replace(cast(gen_random_uuid() as varchar), '-', ''), 1, 8)))"))
  name      String   @unique
  watches   Watch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// Movement Table
model Movement {
  id        String   @id @default(uuid())
  code      String   @unique @default(dbgenerated("concat('MV', upper(substring(replace(cast(gen_random_uuid() as varchar), '-', ''), 1, 8)))"))
  name      String   @unique
  watches   Watch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// Update Watch model to use relations
model Watch {
  id              String       @id @default(uuid())
  code            String       @unique @default(dbgenerated("concat('W', upper(substring(replace(cast(gen_random_uuid() as varchar), '-', ''), 1, 9)))"))
  name            String       @db.VarChar(100)
  description     String?      @db.Text
  price           Float
  gender          WatchGender  @default(UNISEX)
  brandId         String      
  brand           Brand        @relation(fields: [brandId], references: [id])
  materialId      String?
  material        Material?    @relation(fields: [materialId], references: [id])
  bandMaterialId  String?
  bandMaterial    BandMaterial? @relation(fields: [bandMaterialId], references: [id])
  movementId      String?
  movement        Movement?    @relation(fields: [movementId], references: [id])
  stock           Int          @default(0)
  diameter        Float?       // in millimeters
  waterResistance Int?        // in meters
  warranty        Int          @default(24)     // in months
  videoUrl        String? 
  images          Image[]
  stockItems      StockItem[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  quantities      Quantity[]
  favorites       Favorite[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Quantity {
  id        String   @id @default(uuid())
  watch     Watch    @relation(fields: [watchId], references: [id])
  watchId   String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([watchId])
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  watch     Watch    @relation(fields: [watchId], references: [id])
  watchId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, watchId])
  @@index([userId])
  @@index([watchId])
}

// Image Table (Watch Images)
model Image {
  id        String   @id @default(uuid())
  url       String   // Đường dẫn ảnh
  watch     Watch    @relation(fields: [watchId], references: [id])
  watchId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cart Table (User Shopping Cart)
model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique // Mỗi user chỉ có một giỏ hàng
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Cart Item Table (Items in Cart)
model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  watch     Watch    @relation(fields: [watchId], references: [id])
  watchId   String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Stock Entry Table (Lưu thông tin nhập hàng)
// Stock Entry Table
model StockEntry {
  id          String      @id @default(uuid())
  addedBy     User        @relation(fields: [addedById], references: [id])
  addedById   String
  items       StockItem[]
  totalPrice  Float       // Add total price for entire stock entry
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Stock Item Table
model StockItem {
  id           String     @id @default(uuid())
  stockEntry   StockEntry @relation(fields: [stockEntryId], references: [id])
  stockEntryId String
  watch        Watch      @relation(fields: [watchId], references: [id])
  watchId      String
  quantity     Int        @default(1)
  price        Float      // Add price per unit
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Order Table
model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  address     Address?    @relation(fields: [addressId], references: [id])
  addressId   String?     // Liên kết với địa chỉ giao hàng
  items       OrderItem[]
  totalPrice  Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Order Item Table
model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  watch     Watch    @relation(fields: [watchId], references: [id])
  watchId   String
  quantity  Int      @default(1)
  price     Float    // Giá tại thời điểm đặt hàng
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums for Order Status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}